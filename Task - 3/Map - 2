//word0
public Map<String, Integer> word0(String[] strings) {
 
  Map<String, Integer> map = new HashMap();
  for (String s:strings) {
    map.put(s, 0);
  }
  return map;
}
//wordCount
public Map<String, Integer> wordCount(String[] strings) {
  Map<String, Integer> map = new HashMap();
  for (String s:strings) {
    String tmp = s;
    if (map.containsKey(tmp)) {
      int count = map.get(tmp);
      map.put(tmp, count + 1);
    } else
      map.put(tmp, 1);
  }
  return map;
}
//wordMultiple
public Map<String, Boolean> wordMultiple(String[] strings) {
  Map<String, Integer> stringCount = new HashMap();
  Map<String, Boolean> map = new HashMap();
  
  for(String s: strings) {
    String key = s;
    if(stringCount.containsKey(key)) {
      int count = stringCount.get(key);
      count++;
      stringCount.put(key, count);
    } else {
      stringCount.put(key, 1);
    }
    map.put(key, stringCount.get(key) >= 2);
  }
  return map;
}
//wordLen
public Map<String, Integer> wordLen(String[] strings) {
  Map<String, Integer> map = new HashMap();
  for (String s:strings) {
    map.put(s, s.length());
  }
  return map;
}
//firstChar
public Map<String, String> firstChar(String[] strings) {
  Map<String, String> map = new HashMap();
  for (String s: strings) {
    String key = s.charAt(0) + "";
    if (map.containsKey(key)) {
      String value = map.get(key) + s;
      map.put(key, value);
    } else
      map.put(key, s);
  }
  return map;
}
//allSwap
public String[] allSwap(String[] strings) {
  Map<String, Integer> map = new HashMap();
  for (int i = 0; i < strings.length; i++){
    if (map.containsKey(strings[i].charAt(0) + "")){
      String string = strings[i];
      strings[i] = strings[map.get(strings[i].charAt(0) + "")];
      strings[map.get(strings[i].charAt(0) + "")] = string;
      map.remove(strings[i].charAt(0) + "");
    } else
      map.put(strings[i].charAt(0) + "", i);
  }
  return strings;
}
//pairs
public Map<String, String> pairs(String[] strings) {
  Map<String, String> map = new HashMap();
  for (String s:strings) {
    map.put(s.charAt(0) + "", s.charAt(s.length() - 1) + "");
  }
  return map;
}
//wordAppend
public String wordAppend(String[] strings) {
   Map<String, Integer> map = new HashMap();
  String string = "";
  
  for(String s: strings) {
    String key = s;
    
    if (map.containsKey(key)) {
      int value = map.get(key);
      value++;
      if (value % 2 == 0)
        string += key;
      map.put(key, value);
    } else
      map.put(key, 1);
  }
  return string;
}
//firstSwap
public String[] firstSwap(String[] strings) {
  Map<String, Integer> map = new HashMap();
  for (int i = 0; i < strings.length; i++) {
    String string = String.valueOf(strings[i].substring(0, 1));
    if (map.containsKey(string)) {
      int value = map.get(string);
      if (value == -1)
        continue;
      int pos = map.get(string); 
      String temp = strings[pos];
      strings[pos] = strings[i];
      strings[i] = temp ;
      map.put(string, -1);
    } else
      map.put(string, i);
  }
  return strings;
}
