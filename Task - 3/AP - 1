//scoresIncreasing
public boolean scoresIncreasing(int[] scores) {
  for(int i = 1; i < scores.length; i++) {
        if(scores[i] < scores[i-1])
            return false;
    }
                
    return true;
}
//scoresAverage
public int scoresAverage(int[] scores) {
  int first = average(scores, 0, scores.length / 2);
    int second = average(scores, scores.length / 2, scores.length);
    return Math.max(first, second);
}

public int average(int[] scores, int start, int end) {
    int sum = 0;
          
    for(int i = start; i < end; i++)
        sum += scores[i];

    return sum / (end - start);
}
//wordsWithoutList
public List wordsWithoutList(String[] words, int len) {
  ArrayList<String> list = new ArrayList<String>();
    
    for(int i = 0; i < words.length; i++) {
        if(words[i].length() != len)
            list.add(words[i]);
    }
                    
    return list;
}
//copyEvens
public int[] copyEvens(int[] nums, int count) {
  int[] arr = new int[count];
    int index = 0;
      
    for(int i = 0; index < count; i++) {
        if(nums[i] % 2 == 0) {
            arr[index] = nums[i];
            index++;
        }
    }
                                
    return arr;
}
//scoreUp
public int scoreUp(String[] key, String[] answers) {
  int score = 0;
    
    for(int i = 0; i < key.length; i++) {
        if(key[i].charAt(0) == answers[i].charAt(0)) {
            score += 4;
        } else if(answers[i].charAt(0) != '?') {
            score -= 1;
        }
    }
                                  
    return score;
}
//sumHeights
public int sumHeights(int[] heights, int start, int end) {
   int sum = 0;
    
    for(int i = start; i < end; i++)
        sum += Math.abs(heights[i] - heights[i+1]);
              
    return sum;
}
//userCompare
public int userCompare(String aName, int aId, String bName, int bId) {
  if(aName.compareTo(bName) < 0) {
        return -1;
    } else if(aName.compareTo(bName) > 0) {
        return 1;
    } else if(aId < bId) {
        return -1;
    } else if(aId > bId) {
        return 1;
    }
                            
    return 0;
}
//scores100
public boolean scores100(int[] scores) {
  for(int i = 0; i <= scores.length - 2; i++) {
        if(scores[i] == 100 && scores[i+1] == 100)
            return true;
    }
                
    return false;
}
//wordsCount
public int wordsCount(String[] words, int len) {
  int count = 0;
    
    for(int i = 0; i < words.length; i++) {
        if(words[i].length() == len)
            count++;
    }
                    
    return count;
}
//hasOne
public boolean hasOne(int n) {
  while(n != 0) {
        if(n % 10 == 1)
            return true;
                  
        n /= 10;
    }
                          
    return false;
}
//copyEndy
public int[] copyEndy(int[] nums, int count) {
   int[] arr = new int[count];
    int index = 0;
      
    for(int i = 0; index < count; i++) {
        if(isEndy(nums[i])) {
            arr[index] = nums[i];
            index++;
        }
    }
                                
    return arr;
}

public boolean isEndy(int n) {
    return 0 <= n && n <= 10 || n >= 90 && n <= 100;
}
//wordsWithout
public String[] wordsWithout(String[] words, String target) {
  int count = 0;
    
    for(int i = 0; i < words.length; i++) {
        if(!words[i].equals(target))
            count++;
    }
                    
    String[] arr = new String[count];
    int index = 0;
                          
    for(int i = 0; index < count; i++) {
        if(!words[i].equals(target)) {
            arr[index] = words[i];
            index++;
        }
    }
                                                    
    return arr;
}
//sumHeights2
public int sumHeights2(int[] heights, int start, int end) {
  int sum = 0;
    
    for(int i = start; i < end; i++) {
        if(heights[i] < heights[i+1])
            sum = sum + 2 * (heights[i+1] - heights[i]);
        else
            sum = sum + heights[i] - heights[i+1];
    }
                              
    return sum;
}
//scoresClump
public boolean scoresClump(int[] scores) {
  for(int i = 0; i <= scores.length - 3; i++) {
        if(scores[i+2] - scores[i] <= 2)
            return true;
    }
                
    return false;
}
//wordsFront
public String[] wordsFront(String[] words, int n) {
  String[] arr = new String[n];
    
    for(int i = 0; i < arr.length; i++)
        arr[i] = words[i];
              
    return arr;
}
//dividesSelf
public boolean dividesSelf(int n) {
  for(int val = n; val != 0; val /= 10) {
        int digit = val % 10;
        if(digit == 0 || n % digit != 0)
            return false;
    }
                      
    return true;
}
//matchUp
public int matchUp(String[] a, String[] b) {
  int count = 0;
    
    for(int i = 0; i < a.length; i++) {
        if(a[i].length() > 0 && b[i].length() > 0 && 
            a[i].charAt(0) == b[i].charAt(0))
            count++;
    }
                          
    return count;
}
//scoresSpecial
public int scoresSpecial(int[] a, int[] b) {
    return largestSpecial(a) + largestSpecial(b);
}

public int largestSpecial(int[] a) {
    int largest = 0;
      
    for(int i = 0; i < a.length; i++) {
        if(a[i] % 10 == 0 && a[i] > largest)
            largest = a[i];
    }
                      
    return largest;
}
//bigHeights
public int bigHeights(int[] heights, int start, int end) {
  int count = 0;
    
    for(int i = start; i < end; i++) {
        if(Math.abs(heights[i] - heights[i+1]) >= 5)
            count++;
    }
                    
    return count;
}
