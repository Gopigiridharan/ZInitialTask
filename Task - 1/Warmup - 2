//stringTimes
public String stringTimes(String str, int n) {
  String s = "";
  for (int i=0; i<n; i++) {
    s += str;
  }
  return s;
}
//doubleX
boolean doubleX(String str) {
  int i = str.indexOf("x");
  if(i < 0){
    return false;
  }
  if (i+1 >= str.length()){
    return false;
  }
  return str.substring(i+1, i+2).equals("x");
}
//last2
public int last2(String str) {
  
  if (str.length() < 2) return 0;

  String end = str.substring(str.length()-2);
  int count = 0;
  for (int i=0; i<str.length()-2; i++) {
    String sub = str.substring(i, i+2);
    if (sub.equals(end)) {
      count++;
    }
  }
  return count;
}
//array123
public boolean array123(int[] nums) {
   for (int i=0; i < nums.length-2; i++) {
    if (nums[i]==1 && nums[i+1]==2 && nums[i+2]==3) {
      return true;
    }
  }
  return false;
}
//altPairs
public String altPairs(String str) {
	String s = "";

	for (int i = 0; i < str.length(); i += 4)
	  {
		if (i + 1 < str.length())
		  {
			s = s + str.charAt(i) + str.charAt(i + 1);
		  }else{
		      s = s + str.charAt(i);
		  }
	  }
  return s;
}
//noTriples
public boolean noTriples(int[] nums) {
  for (int i=0; i < (nums.length-2); i++) {
    int first = nums[i];
    if (nums[i+1]==first && nums[i+2]==first) {
      return false;
    }
  }
  return true;
}
//frontTimes
public String frontTimes(String str, int n) {
  int frontLen = 3;
  if (frontLen > str.length()) {
    frontLen = str.length();
  }
  String front = str.substring(0, frontLen);
  
  String result = "";
  for (int i=0; i<n; i++) {
    result = result + front;
  }
  return result;
}
//stringBits
public String stringBits(String str) {

  String s = "";
  for (int i = 0; i < str.length(); i = i + 2) {
    s += str.charAt(i);
  }
  return s;
}
//arrayCount9
public int arrayCount9(int[] nums) {
  int count = 0;
  for(int i = 0; i < nums.length; i++){
    if(nums[i]==9){
      count++;
    }
  }
  return count;
}
//stringMatch
public int stringMatch(String a, String b) {
  int len;
  if(a.length()<b.length()){
    len = a.length();
  }else{
    len = b.length();
  }
  int count = 0;
  
  // Look at both substrings starting at i
  for (int i=0; i<len-1; i++) {
    String aS = a.substring(i, i+2);
    String bS = b.substring(i, i+2);
    if (aS.equals(bS)) {  // Use .equals() with strings
      count++;
    }
  }

  return count;
}
//stringYak
public String stringYak(String str) {
  String s = "";
  for (int i=0; i<str.length(); i++) {
    if (i+2<str.length() && str.charAt(i)=='y' && str.charAt(i+2)=='k') {
      i =  i + 2;
    } else { 
      s += str.charAt(i);
    }
  }
  return s;
}
//has271
public boolean has271(int[] nums) {
  if(nums.length<3){
    return false;
  }
  for(int i = 0; i < nums.length-2; i++){
   int val = nums[i];
    if (nums[i+1] == (val+5) && Math.abs(nums[i+2] - (val-1)) <= 2) {  
        return true;
  }
  }
  return false;
}
//countXX
int countXX(String str) {
  int count = 0;
  for (int i = 0; i < str.length()-1; i++) {
    if (str.substring(i, i+2).equals("xx")) count++;
  }
  return count;
}
//stringSplosion
public String stringSplosion(String str) {
  String s = "";
  for (int i=0; i<str.length(); i++) {
    s += str.substring(0, i+1);
  }
  return s;
}
//arrayFront9
public boolean arrayFront9(int[] nums) {
  int end = nums.length;
  if (end > 4) end = 4;
  
  for (int i=0; i<end; i++) {
    if (nums[i] == 9) return true;
  }
  
  return false;
}
//stringX
public String stringX(String str) {
   String s = "";
  for (int i=0; i<str.length(); i++) {
    if (!(i > 0 && i < (str.length()-1) && str.substring(i, i+1).equals("x"))) {
      s += str.substring(i, i+1);
    }
  }
  return s;
}
//array667
public int array667(int[] nums) {
  int count = 0;
  for (int i=0; i < (nums.length-1); i++) {
    if (nums[i] == 6) {
      if (nums[i+1] == 6 || nums[i+1] == 7) {
        count++;
      }
    }
  }
  return count;
}
