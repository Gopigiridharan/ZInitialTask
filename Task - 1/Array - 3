//maxSpan
public int maxSpan(int[] nums) {
  if(nums.length > 0 && nums[0] != nums[nums.length-1]){
      return nums.length-1;
   }
  return nums.length;
}
//canBalance
public boolean canBalance(int[] nums) {
  int lSum = 0;
  for (int i = 0; i < nums.length; i++) {
    lSum += nums[i];
    int rSum = 0;
    for (int j = i+1; j < nums.length; j++) {
      rSum += nums[j];
    }
    if (rSum == lSum)
      return true;
  }
  return false;
}
//seriesUp
public int[] seriesUp(int n) {
  int[] arr = new int[n * (n + 1) / 2];
  int i = 0;
  for (int j = 1; j <= n; ++j)
    for (int k = 1; k <= j; ++k)
      arr[i++] = k;
  return arr;
}
//linearIn
public boolean linearIn(int[] outer, int[] inner) {
  int numFound = 0;
  if(inner.length == 0) {
     return true;
  }
  int k = 0;
  for(int i = 0; i < outer.length; i++) {
     if(outer[i] == inner[k]) {
        numFound++;
        k++;
     } else if(outer[i] > inner[k]) {
        return false;
     }
     if(numFound == inner.length)
        return true;
  }
  return false;
}
//maxMirror
public int maxMirror(int[] nums) {
  int count= 0, max = 0;
  for (int i = 0; i < nums.length; i++){
    count=0;
    for (int j = nums.length-1; i + count < nums.length && j > -1; j--){
      if(nums[i+count] == nums[j]){
        count++;
      }else{
        if (count > 0){
          max = Math.max(count,max);
          count = 0;
        }
      }
    }
    max = Math.max(count,max);
  }
  return max;
}
//squareUp
public int[] squareUp(int n) {
  int nums[] = new int[n*n];
  int a = n;
  for(int i = 0; i < n; i++) {
    int pos = n*n - i - 1;
     for(int j = 0; j < a; j++) {
       nums[pos -n*j] = i+1;
     }
     a--;
   }
return nums;
}
//countClumps
public int countClumps(int[] nums) {
  boolean match = false;
  int count = 0;
  for (int i = 0; i < nums.length-1; i++) {
    if (nums[i] == nums[i+1] && !match) {
      match = true;
      count++;
    } else if (nums[i] != nums[i+1]) {
      match = false;
    }
  }
  return count;
}


