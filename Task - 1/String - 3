//countYZ
public int countYZ(String str) {
  int count = 0;
  str = str.toLowerCase();
  for (int i = 0; i < str.length(); i++) {
    if (str.charAt(i) == 'y' || str.charAt(i) == 'z') {
      if (i < str.length()-1 && !Character.isLetter(str.charAt(i+1)))
        count++;
      else if (i == str.length()-1)
        count++;
    }
  }
  return count;
}
//gHappy
public boolean gHappy(String str) {
  boolean happy = true;
  for (int i = 0; i < str.length(); i++) {
    if (str.charAt(i) == 'g') {
      if (i > 0 && str.charAt(i-1) == 'g')
        happy = true;
      else if (i < str.length()-1 && str.charAt(i+1) == 'g')
        happy = true;
      else
        happy = false;
    }
  }
  return happy;
}
//sameEnds
public String sameEnds(String string) {
  String fin = "";
  String tmp = "";
  for (int i = 0; i < string.length(); i++) {
    tmp += string.charAt(i);
    int tmplen = tmp.length();
    if (i < string.length() / 2 && tmp.equals(string.substring(string.length()-tmplen,string.length())))
      fin = tmp;
  }
  return fin;
}
//sumNumbers
public int sumNumbers(String str) {
  int sum = 0, num = 0;
  for (int i = 0; i < str.length(); i++) {
      while (i < str.length() && Character.isDigit(str.charAt(i))) {
      num = (num * 10) + Integer.parseInt(str.substring(i, i + 1));
      i++;
   }
      sum += num;
      num = 0;
  }
    return sum;
}
//withoutString
public String withoutString(String base, String remove) {
  String result = "";
  for(int i = 0; i < base.length(); i++){
     if(i <= base.length()-remove.length()){
  String tmp = base.substring(i, i + remove.length());
     if( tmp.equalsIgnoreCase(remove) ){
         i += remove.length() - 1;
   } else {
        result += base.charAt(i);
   }
 } else {
     result += base.charAt(i);
  }
}
  return result;
}
//countTriple
public int countTriple(String str) {
  int count = 0;
  if(str.length()<3){
    return count;
  }
  for (int i = 0; i < str.length()-2; i++){
    char tmp = str.charAt(i);
    if (tmp == str.charAt(i+1) && tmp == str.charAt(i+2))
      count++;
  }
  return count;
}
//mirrorEnds
public String mirrorEnds(String string) {
  String fin = "", tmp1 = "", tmp2 = "";
  for (int i = 0; i < string.length(); i++) {
    tmp1 += string.substring(i,i+1);
    tmp2 = "";
    for (int j = tmp1.length()-1; j >= 0; j--) {
      tmp2 += tmp1.substring(j,j+1);
      if (tmp2.equals(string.substring(string.length()-i-1,string.length())))
        fin = tmp1;
    }
  }
  return fin;
}
//notReplace
public String notReplace(String str) {
  String result = "";
  for(int i = 0; i < str.length(); i++){
    if(i-1 >= 0 && Character.isLetter(str.charAt(i-1))
    || i+2 < str.length() && Character.isLetter(str.charAt(i+2))) {
      result += str.charAt(i);
    }
    else if(i+1 < str.length() && str.substring(i, i+2).equals("is")) {
      result += "is not";
      i++;
    }
    else result += str.charAt(i);
  }
  return result;
}
//equalIsNot
public boolean equalIsNot(String str) {
  int not = 0, is = 0;
  for (int i = 0; i < str.length(); i++) {
    if (i < str.length() - 2) {
      String tmp = str.substring(i,i+3);
      if (tmp.equals("not"))
        not++;
    }
    if (i < str.length() - 1) {
      String tmp2 = str.substring(i,i+2);
      if (tmp2.equals("is"))
        is++;
    }
  }
  if (not == is)
    return true;
  else
    return false;
}
//sumDigits
public int sumDigits(String str) {
  int count = 0;
  
  for(int i = 0; i < str.length(); i++){
    if(str.charAt(i)>='0'&&str.charAt(i)<='9'){
      count+=((int)(str.charAt(i) - 48));
    }
  }
  return count;
}
//maxBlock
public int maxBlock(String str) {
  int count = 0, tmpcount = 1;
  if (str.length() == 0)
    return 0;
  for (int i = 0; i < str.length(); i++) {
    if (i < str.length()-1 && str.charAt(i) == str.charAt(i+1))
      tmpcount++;
    else
      tmpcount = 1;
    if (tmpcount > count)
      count = tmpcount;
  }
  return count;
}
