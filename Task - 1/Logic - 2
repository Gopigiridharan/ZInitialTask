//makeBricks
public boolean makeBricks(int small, int big, int goal) {
  int digit = goal % 10;
  if (goal > small + (big * 5))
   return false;
  if (digit < 5 && small < digit)
    return false;
  else if (digit > 5 && digit > small + 5)
    return false;
  return true;
}
//noTeenSum
public int noTeenSum(int a, int b, int c) {
  return fixTeen(a) + fixTeen(b) + fixTeen(c);
}
public int fixTeen(int n) {
    if ( (n >=13 && n < 15) || (n > 16 && n <= 19) )
      return 0;
  return n;
}
//blackJack
public int blackjack(int a, int b) {
  if(a>21 && b>21) {
    return 0;
  }
   return (a>21)? b : (b>21)? a : Math.max(a,b);
}
//loneSum
public int loneSum(int a, int b, int c) {
  return(a==b&&b==c)?0:(a==b)?c:(a==c)?b:(b==c)?a:a+b+c;
}
//roundSum
public int roundSum(int a, int b, int c) {
  return round10(a) + round10(b) + round10(c);
}
public int round10(int n) {
  if (n % 10 < 5)
    return n - (n%10);
  else
    return n + (10 - (n%10));
}
//evenlySpaced
public boolean evenlySpaced(int a, int b, int c) {
  return ((a+b) == 2*c) || ((a+c) == 2*b) || ((b+c) == 2*a);
}
//luckySum
public int luckySum(int a, int b, int c) {
  if (a == 13)
    return 0;
  else if (b == 13)
    return a;
  else if (c == 13)
    return a + b;
  else
    return a + b +c;
}
//closeFar
public boolean closeFar(int a, int b, int c) {
  if (Math.abs(a - b) <= 1 && Math.abs(a - c) >= 2 && Math.abs(b - c) >= 2){
      return true;
  } else if (Math.abs(a - c) <= 1 && Math.abs(a - b) >= 2 && Math.abs(b - c) >= 2){
      return true;
  }
  return false;
}
//makeChocolate
public int makeChocolate(int small, int big, int goal) {
  if (big * 5 + small < goal | small < goal % 5) {
    return -1;
  }
   if (big * 5 <= goal) return goal - big * 5;{
   return goal % 5;
   }
}
