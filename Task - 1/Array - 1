//firstLast6
public boolean firstLast6(int[] nums) {
  if(nums.length == 1 && nums[0] == 6){
    return true;
  }
  if(nums[0]==6||nums[nums.length-1]==6){
    return true;
  }
  return false;
}
//commonEnd
public boolean commonEnd(int[] a, int[] b) {
  return (a[0]==b[0]||a[a.length-1]==b[b.length-1]);
}
//reverse3
public int[] reverse3(int[] nums) {
  
  int temp = nums[0];
  nums[0] = nums[nums.length-1];
  nums[nums.length-1] = temp;
  return nums;
}
//middleWay
public int[] middleWay(int[] a, int[] b) {
  return new int[]{a[1],b[1]};
}
//no23
public boolean no23(int[] nums) {
  if(nums[0] == 2||nums[0]==3||nums[1] == 2 || nums[1] == 3){
    return false;
  } 
  return true;
}
//fix23
public int[] fix23(int[] nums) {
  for(int i = 0; i < nums.length - 1; i++){
    if(nums[i] == 2 && nums[i+1] == 3){
      nums[i+1] = 0;
    }
  }
  return nums;
}
//makeMiddle
public int[] makeMiddle(int[] nums) {
  if(nums.length == 2){
    return nums;
  }
  int n = nums.length/2;
  return new int[]{nums[n-1],nums[n]};
}
//midThree
public int[] midThree(int[] nums) {
  if(nums.length == 3){
    return nums;
  }
  int n = nums.length / 2;
  return new int[]{nums[n-1], nums[n], nums[n+1]};
}
//unlucky1
public boolean unlucky1(int[] nums) {
  if (nums.length < 2) {
    return false;
  } else if ((nums[0] == 1 && nums[1] == 3) || (nums[nums.length-2] == 1 && nums[nums.length-1] == 3)) {
      return true;
    } else if (nums.length > 2 && nums[1] == 1 && nums[2] == 3) {
        return true;
    }
    return false;
}
//sameFirstLast
public boolean sameFirstLast(int[] nums) {
  
  if(nums.length == 0){
    return false;
  }
  return nums[0] == nums[nums.length - 1];
}
//sum3
public int sum3(int[] nums) {
  return nums[0]+nums[1]+nums[2];
}
//maxEnd3
public int[] maxEnd3(int[] nums) {
  int max = nums[0];
  if(max < nums[2]){
    max = nums[2];
  }
  return new int[]{max,max,max};
}
//makeEnds
public int[] makeEnds(int[] nums) {
  if(nums.length == 0){
    return nums;
  }
  return new int[]{nums[0],nums[nums.length - 1]};
}
//makeLast
public int[] makeLast(int[] nums) {
  int arr[] = new int[nums.length * 2];
  arr[arr.length - 1] = nums[nums.length - 1];
  return arr;
}
//start1
public int start1(int[] a, int[] b) {
  int count = 0;
  if(a.length != 0 && a[0] ==1){
    count++;
  }
  if(b.length != 0 && b[0] ==1){
    count++;
  }
  return count;
}
//plusTwo
public int[] plusTwo(int[] a, int[] b) {
  return new int[]{a[0],a[1],b[0],b[1]};
}
//maxTriple
public int maxTriple(int[] nums) {
  int max = nums[0];
  int mid = nums.length / 2;
  if(max<nums[mid]){
    max = nums[mid];
  }
  if(max<nums[nums.length-1]){
    max = nums[nums.length - 1];
  }
  return max;
}
//make2
public int[] make2(int[] a, int[] b) {
  int[] temp = new int[2];
int index=0;
for(int i=0; i<a.length; i++){
if(index<2){
temp[index]=a[i];
index++;
}
}
for(int i=0; i<b.length; i++){
if(index<2){
temp[index]=b[i];
index++;
}
}
return temp;
}
//makePi
public int[] makePi() {
  return new int[]{3,1,4};
}
//rotateLeft3
public int[] rotateLeft3(int[] nums) {
  for(int i = 0; i < nums.length - 1; i++){
    int temp = nums[i];
    nums[i] = nums[i+1];
    nums[i+1] = temp;
  }
  return nums;
}
//sum2
public int sum2(int[] nums) {
  int sum = 0;
  if(nums.length == 1){
    sum+=nums[0];
    return sum;
  }else if(nums.length == 0){
    return sum;
  }
  sum+=nums[0]+nums[1];
  return sum;
}
//has23
public boolean has23(int[] nums) {
  return nums[0]==2||nums[0] == 3||nums[1]==2||nums[1] == 3;
}
//double23
public boolean double23(int[] nums) {
  if(nums.length < 2){
    return false;
  }
  int c1 = 0, c2 = 0;
  for(int i = 0; i < nums.length; i++){
    if(nums[i] == 2){
      c1++;
    }
    if(nums[i] ==  3){
      c2++;
    }
  }
  return c1==2||c2==2;
}
//biggerTwo
public int[] biggerTwo(int[] a, int[] b) {
  int sum1 = a[0]+a[1];
  int sum2 = b[0]+b[1];
  
  if(sum1==sum2){
    return a;
  }else if(sum1<sum2){
    return b;
  }
  return a;
}
//swapEnds
public int[] swapEnds(int[] nums) {

    int temp = nums[0];
    nums[0] = nums[nums.length - 1];
    nums[nums.length - 1] = temp;
    return nums;
}
//frontPiece
public int[] frontPiece(int[] nums) {
  if(nums.length <=2 ){
    return nums;
  }
  return new int[]{nums[0],nums[1]};
}
//front11
public int[] front11(int[] a, int[] b) {
  if(a.length == 0 && b.length == 0){
    return new int[]{};
  }
  if(a.length == 0 && b.length > 0){
    return new int[]{b[0]};
  }
  if(b.length == 0 && a.length > 0){
    return new int[]{a[0]};
  }
  return new int[]{a[0],b[0]};
}
