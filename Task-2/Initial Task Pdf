1) Write a program to print a letters from the user input character to 'Z' without using
strings.
Example 1: input : X
Output : XYZ
Example 2: Input : M
Output : MNOPQRSTUWXYZ

	public static void main(String[] args) {

		char start = 'T';

		for (char i = start; i <= 'Z'; i++) {
			System.out.print(i);
		}
		System.out.println();
		charRange(start);
	}

	public static void charRange(char ch) {
		if (ch > 'Z') {
			return;
		}
		System.out.print(ch);
		charRange(ch += 1);
	}
2) Write a program to define the functionality of a Bitwise operators.
int num1 = 10; // Decimal equivalent of 1010 in binary
		int num2 = 4; // Decimal equivalent of 0100 in binary

		// Bitwise AND (&)
		System.out.println("num1 & num2 = " + (num1 & num2));
		// Performs AND operation on each bit of num1 and num2. Resultant bit is 1 if
		// both corresponding bits are 1.

		// Bitwise OR (|)
		System.out.println("num1 | num2 = " + (num1 | num2));
		// Performs OR operation on each bit of num1 and num2. Resultant bit is 1 if
		// either corresponding bit is 1.

		// Bitwise XOR (^)
		System.out.println("num1 ^ num2 = " + (num1 ^ num2));
		// Performs XOR operation on each bit of num1 and num2. Resultant bit is 1 if
		// the corresponding bits are different.

		// Left shift (<<)
		System.out.println("num1 << 2 = " + (num1 << 2));
		// Shifts all bits of num1 by 2 positions to the left, filling empty positions
		// with 0s.

		// Signed right shift (>>)
		System.out.println("num1 >> 2 = " + (num1 >> 2));
		// Shifts all bits of num1 by 2 positions to the right, preserving the sign bit
		// (leftmost bit).

		// Unsigned right shift (>>>) - not covered here
		// Similar to signed right shift but fills empty positions with 0s instead of
		// preserving the sign bit.
		System.out.println("69>>>2 = " + (69 >>> 2));

		// Bitwise complement (~)
		System.out.println("~num1 = " + (~num1));
		// Inverts all bits of num1 (one's complement).
3) Write a program for the following. Let consider 20 students in a class with the roll no
101-120. We are going to split them into four groups. Based on their roll number we are
going to split them with the following logics.
Example 1:
Input : Total Number of students : 20
Output:
Group 1:
101
105
109
113
117
Group 2:
102
106
110
114
118
Group 3:
103
107
111
115
119
Group 4:
104
108
112
116
120
	public static void main(String[] args) {
		int input = 20, i = 101, j = i + input - 1, group = 1;
		while (group <= 4) {
			System.out.println("Group - " + group + " :");
			group++;
			int b = i;
			while (b <= j) {
				System.out.println(b);
				b += 4;
			}
			i++;
		}
	}
4) Write a program to print the number 7.50 without using String(print 7.50 not 7.5).
	public static void main(String[] args) {

		System.out.printf("%.2f", 7.50);
		
	}
7) Evaluate the following expression on paper and on program and understand the
difference
a+=a++ + ++a + –a + a–; when a=28
		int a = 28;
		a+=a++ + ++a + --a + a--;
		System.out.println(a+" - a");
8) Program to Find ASCII Value of a Character
		char ch = 'A';
		System.out.println((int)ch);
9) Write a program to display the number in reverse order without use of String
functions.
Eg 1: Input: 12345
Output :The number in reverse order is : 54321
		int num = 12345;
		int ans = 0;

		while (num > 0) {
			ans = ans * 10 + num % 10;
			num /= 10;
		}

		System.out.println(ans);
10) Using Recursion, reverse the string such as
Eg 1: Input: one two three
Output: three two one
Eg 2: Input: I love india
Output: india love I

	public static void reverse(String s, int i, String sep) {
		if (i < 0) {
			System.out.print(sep);
			return;
		}
		if (s.charAt(i) != ' ') {
			sep = s.charAt(i) + sep;
		} else {
			System.out.print(sep + s.charAt(i));
			sep = "";
		}
		reverse(s, i - 1, sep);
	}
11) Write a program to give the following output for the given input:
Eg 1: Input: a1b10
Output: abbbbbbbbbb
Eg: 2: Input: b3c6d15
Output: bbbccccccddddddddddddddd
The number varies from 1 to 99.
	String s = "b3c6d15";
		char temp;

		for (int i = 0; i < s.length(); i++) {
			int num = 0;
			if (s.charAt(i) >= '0' && s.charAt(i) <= '9') {
				temp = s.charAt(i - 1);
				while (s.charAt(i) >= '0' && s.charAt(i) <= '9' && i < s.length() - 1) {
					num = num * 10 + (s.charAt(i++) - 48);
				}
				if (s.charAt(i) >= '0' && s.charAt(i) <= '9' && i == s.length() - 1) {
					num = num * 10 + (s.charAt(i) - 48);
				}
				for (int j = 0; j < num; j++) {
					System.out.print(temp);
				}
			}
		}
12) Program to Check Whether a Character is an Alphabet or not
	char ch = 'j';

		if (ch >= 'A' && ch <= 'Z' || ch >= 'a' && ch <= 'z') {
			System.out.println(ch + " - Alphabet");
		} else {
			System.out.println(ch + " - Not an Alphabet");
		}
13) Java Program to print the smallest element in an array
	int arr[] = { 1, 2, -3, 3, 4, 5, 6 };

		int small = arr[0];

		for (int i = 1; i < arr.length; i++) {
			if (arr[i] < small) {
				small = arr[i];
			}
		}
		System.out.println(small);
14) Java Program to copy all elements of one array into another array
	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };

//		int copy[] = arr;

		int copy[] = new int[arr.length];
		for (int i = 0; i < copy.length; i++) {
			copy[i] = arr[i];
		}

//		int copy[] = arr.clone();

		System.out.println(Arrays.toString(copy));
15) Java Program to print the duplicate elements of an array
	int arr[] = { 1, 2, 3, 4, 5, 1, 4, 6, 1, 7, 9, 5, 1, 3, 5, 8, 9, 56, 3, 2 };

		int dup = -2147482647;
		for (int i = 0; i < arr.length - 1; i++) {
			int count = 0;
			if (arr[i] != dup) {
				for (int j = i + 1; j < arr.length; j++) {
					if (arr[i] == arr[j]) {
						count++;
						arr[j] = dup;
					}
				}
			}
			if (count > 0 && arr[i] != dup) {
				System.out.print(arr[i] + " ");
			}
		}
16) Given two sorted arrays, merge them such that the elements are not repeated
Example 1:
Input: Array 1: 2,4,5,6,7,9,10,13
Array 2: 2,3,4,5,6,7,8,9,11,15
Output: Merged array: 2,3,4,5,6,7,8,9,10,11,13,15
	int arr1[] = { 2, 4, 5, 6, 7, 9, 10, 13 };
		int arr2[] = { 2, 3, 4, 5, 6, 7, 8, 9, 11, 15 };
		int a = 0, b = 0;

		while (a < arr1.length && b < arr2.length) {
			if (arr1[a] == arr2[b]) {
				System.out.print(arr2[b++] + " ");
				a++;
			} else if (arr1[a] < arr2[b]) {
				System.out.print(arr1[a++] + " ");
			} else {
				System.out.print(arr2[b++] + " ");
			}
		}
		while (a < arr1.length) {
			System.out.print(arr1[a++] + " ");
		}
		while (b < arr2.length) {
			System.out.print(arr2[b++] + " ");
		}
17) Alternate sorting: Given an array of integers, rearrange the array in such a way that
the first element is first maximum and second element is first minimum.
Example: Input : {1, 2, 3, 4, 5, 6, 7}
Output: {7, 1, 6, 2, 5, 3, 4}
	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8 };
		int i = 0, j = arr.length - 1;
		while (i <= j) {
			System.out.print(arr[j] + "  ");
			if (i != j) {
				System.out.print(arr[i] + "  ");
			}
			i++;
			j--;
		}
18) Write a program to sort the elements in odd positions in descending order and
elements in ascending order.
Eg 1: Input: 13,2 4,15,12,10,5
Output: 13,2,12,10,5,15,4
Eg 2: Input: 1,2,3,4,5,6,7,8,9
Output: 9,2,7,4,5,6,3,8,1
	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8 };
		int asc, des;
		if (arr.length % 2 == 0) {
			asc = arr.length - 2;
			des = arr.length - 1;
		} else {
			asc = arr.length - 1;
			des = arr.length - 2;
		}
//		Even - Ascending
		for (int i = asc; i > 0; i -= 2) {
			for (int j = 0; j <= i; j += 2) {
				if (arr[i] > arr[j]) {
					int temp = arr[i];
					arr[i] = arr[j];
					arr[j] = temp;
				}
			}
		}
//		Odd - Descending
		for (int i = des; i > 1; i -= 2) {
			for (int j = 1; j <= i; j += 2) {
				if (arr[i] < arr[j]) {
					int temp = arr[i];
					arr[i] = arr[j];
					arr[j] = temp;
				}
			}
		}
		System.out.println(Arrays.toString(arr));
19) Java Program to left rotate the elements of a multidimensional array.
			int arr[][] = { { 1, 2, 3 },
				        { 4, 5, 6 },
				        { 7, 8, 9 } };
		int a = 0;
		while (a < arr.length) {
			for (int i = arr.length - 1; i >= 0; i--) {
				for (int j = 0; j < arr.length; j++) {
					if (j == a) {
						System.out.print(arr[i][j] + " ");
					}
				}
			}
			a++;
			System.out.println();
		}
20, 21, 22, 23) Write a programs to print following patterns
	int row = 7, space = row - 1, col = 1;

		for (int i = 1; i <= row; i++) {
			int num = 0;
			for (int j = 1; j <= space + col; j++) {
				if (j <= space) {
					System.out.print("  ");
				} else if (j > space && j <= space + i) {
					num++;
					System.out.print(num + " ");
				} else {
					num--;
					System.out.print(num + " ");
				}
			}
			space--;
			col += 2;
			System.out.println();
		}
	int row = 9, space = row - 1, col = 1;

		for (int i = row; i >= 1; i--) {
			int num = i - 1;
			for (int j = 1; j <= space + col; j++) {
				if (j <= space) {
					System.out.print("  ");
				} else if (j > space && j <= row) {
					num++;
					System.out.print(num + " ");
				} else {
					num--;
					System.out.print(num + " ");
				}
			}
			col += 2;
			space--;
			System.out.println();
		}
	int row = 9, space = 0;

		for (int i = row; i >= 1; i--) {
			for (int j = 1; j <= space + i; j++) {
				if (j <= space) {
					System.out.print(" ");
				} else {
					System.out.print("* ");
				}
			}
			space++;
			System.out.println();
		}
	int row = 9, space = 0;

		for (int i = row; i >= 1; i--) {
			for (int j = 1; j <= space + i; j++) {
				if (j <= space) {
					System.out.print(" ");
				} else {
					System.out.print(i + " ");
				}
			}
			space++;
			System.out.println();
		}
24) Write a program to make such a pattern like a pyramid with numbers increased by 1.
Eg: Input : 10
Output:
1
2 3
4 5 6
7 8 9 10
	int row = 4, num = 1, space = row - 1;

		for (int i = 1; i <= row; i++) {
			for (int j = 1; j <= i + space; j++) {
				if (j <= space) {
					System.out.print(" ");
				} else {
					System.out.print(num + " ");
					num++;
				}
			}
			space--;
			System.out.println();
		}
25) Write a program to print the following output for the given input. You can assume
the string is of odd length
Eg 1: Input: 12345
Output:
1      5
 2   4
   3
 2   4
1      5
String s = "12345";

		for (int i = 0; i < s.length(); i++) {
			for (int j = 0; j < s.length(); j++) {
				if (i == j || i + j == s.length() - 1) {
					System.out.print(s.charAt(j) + " ");
				} else {
					System.out.print("  ");
				}
			}
			System.out.println();
		}
26) Write a program to print the following pattern for the given input number.
Eg 1: Input: 4
Output:
********
***__***
**____**
*______*
**____**
***__***
********
	int input = 4, row = input * 2 - 1, space = 0, star = input;

		for (int i = 1; i <= row; i++) {
			for (int j = 1; j <= input * 2; j++) {

				if (j <= star) {
					System.out.print("*");
				} else if (j > star + space) {
					System.out.print("*");
				} else {
					System.out.print(" ");
				}
			}
			if (i <= row / 2) {
				space += 2;
				star--;
			} else {
				star++;
				space -= 2;
			}
			System.out.println();
		}
27) Find if a String2 is substring of String1. If it is, return the index of the first
occurrence. else return -1.
Eg 1: Input: String 1: test123string
String 2: 123
Output: 4
Eg 2: Input: String 1: testing12
String 2: 1234
Output: -1
	String s1 = "testing12";
		String s2 = "1234";

		int index = -1;
		int l, flag = 0;

		for (int i = 0; i < s1.length(); i++) {
			l = i;
			if (s1.charAt(i) == s2.charAt(0)) {
				for (int j = 0; j < s2.length(); j++) {
					if (s2.charAt(j) == s1.charAt(l)) {
						if (l < s1.length() - 1) {
							l++;
						}
						flag = 1;
					} else {
						flag = 0;
						break;
					}
				}
				if (flag == 1) {
					index = i;
				}
			}
		}
		System.out.println(index);
		System.out.println(s1.indexOf(s2));

28) Write a program to find the sum of the series. The series will be like 1 +11 + 111 +
1111 +.. n terms.
Eg 1: Input: Input the number of terms : 5
Output :
1 + 11 + 111 + 1111 + 11111
The Sum is : 12345
Eg 2: Input: Input the number of terms : 3
Output :
1 + 11 + 111
The Sum is : 123
	int n = 3, num = 1, sum = 0;

		for (int i = 1; i <= n; i++) {
			System.out.print(num);
			if (i < n) {
				System.out.print(" + ");
			}
			sum += num;
			num = num * 10 + 1;
		}
		System.out.println("\nThe Sum is : " + sum);
29) Write a program to print the alphabet 'C' with the stars based on the given numbers
Eg 1: Input: 4
Output:
****
*
*
****
	int input = 4;

		for (int i = 1; i <= input; i++) {
			for (int j = 1; j <= input; j++) {
				if (i == 1 || j == 1 || i == input) {
					System.out.print("*");
				}
			}
			System.out.println();
		}
30) Given a N*N square matrix, return an array of its anti-diagonals. Look at the example for more
details.
Example
Input:
1 2 3
4 5 6
7 8 9
Output : [
[1],
[2, 4],
[3, 5, 7],
[6, 8],
[9]
]
Input :
1 2
3 4
Output :
[ [1],
[2, 3],
[4]
]	
	int arr[][] = { { 1, 2, 3 }, 
				        { 4, 5, 6 },
				        { 7, 8, 9 }};
		int loop, row = 0;
		if (arr.length % 2 == 0) {
			loop = arr.length + (arr.length - 1);
		} else {
			loop = arr.length + (arr.length - 2);
		}

		while (row <= loop) {
			for (int i = 0; i < arr.length; i++) {
				for (int j = 0; j < arr[i].length; j++) {
					if (i + j == row) {
						System.out.print(arr[i][j] + " ");
					}
				}
			}
			row++;
			System.out.println();
		}
